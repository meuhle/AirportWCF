//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Airport_Client.AirportService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Utente", Namespace="http://schemas.datacontract.org/2004/07/Aeroporto")]
    [System.SerializableAttribute()]
    public partial class Utente : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CognomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CreditoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NascitaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassaportoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TipoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cognome {
            get {
                return this.CognomeField;
            }
            set {
                if ((object.ReferenceEquals(this.CognomeField, value) != true)) {
                    this.CognomeField = value;
                    this.RaisePropertyChanged("Cognome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Credito {
            get {
                return this.CreditoField;
            }
            set {
                if ((this.CreditoField.Equals(value) != true)) {
                    this.CreditoField = value;
                    this.RaisePropertyChanged("Credito");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mail {
            get {
                return this.MailField;
            }
            set {
                if ((object.ReferenceEquals(this.MailField, value) != true)) {
                    this.MailField = value;
                    this.RaisePropertyChanged("Mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Nascita {
            get {
                return this.NascitaField;
            }
            set {
                if ((this.NascitaField.Equals(value) != true)) {
                    this.NascitaField = value;
                    this.RaisePropertyChanged("Nascita");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nome {
            get {
                return this.NomeField;
            }
            set {
                if ((object.ReferenceEquals(this.NomeField, value) != true)) {
                    this.NomeField = value;
                    this.RaisePropertyChanged("Nome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Passaporto {
            get {
                return this.PassaportoField;
            }
            set {
                if ((object.ReferenceEquals(this.PassaportoField, value) != true)) {
                    this.PassaportoField = value;
                    this.RaisePropertyChanged("Passaporto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tipo {
            get {
                return this.TipoField;
            }
            set {
                if ((this.TipoField.Equals(value) != true)) {
                    this.TipoField = value;
                    this.RaisePropertyChanged("Tipo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Biglietti", Namespace="http://schemas.datacontract.org/2004/07/Aeroporto")]
    [System.SerializableAttribute()]
    public partial class Biglietti : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClasseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodVoloField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassaportoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrezzoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Buyer {
            get {
                return this.BuyerField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyerField, value) != true)) {
                    this.BuyerField = value;
                    this.RaisePropertyChanged("Buyer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Classe {
            get {
                return this.ClasseField;
            }
            set {
                if ((this.ClasseField.Equals(value) != true)) {
                    this.ClasseField = value;
                    this.RaisePropertyChanged("Classe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodVolo {
            get {
                return this.CodVoloField;
            }
            set {
                if ((object.ReferenceEquals(this.CodVoloField, value) != true)) {
                    this.CodVoloField = value;
                    this.RaisePropertyChanged("CodVolo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Passaporto {
            get {
                return this.PassaportoField;
            }
            set {
                if ((object.ReferenceEquals(this.PassaportoField, value) != true)) {
                    this.PassaportoField = value;
                    this.RaisePropertyChanged("Passaporto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Prezzo {
            get {
                return this.PrezzoField;
            }
            set {
                if ((this.PrezzoField.Equals(value) != true)) {
                    this.PrezzoField = value;
                    this.RaisePropertyChanged("Prezzo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Aeroporti", Namespace="http://schemas.datacontract.org/2004/07/Aeroporto")]
    [System.SerializableAttribute()]
    public partial class Aeroporti : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CittaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Citta {
            get {
                return this.CittaField;
            }
            set {
                if ((object.ReferenceEquals(this.CittaField, value) != true)) {
                    this.CittaField = value;
                    this.RaisePropertyChanged("Citta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Codice {
            get {
                return this.CodiceField;
            }
            set {
                if ((object.ReferenceEquals(this.CodiceField, value) != true)) {
                    this.CodiceField = value;
                    this.RaisePropertyChanged("Codice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nome {
            get {
                return this.NomeField;
            }
            set {
                if ((object.ReferenceEquals(this.NomeField, value) != true)) {
                    this.NomeField = value;
                    this.RaisePropertyChanged("Nome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Stato {
            get {
                return this.StatoField;
            }
            set {
                if ((object.ReferenceEquals(this.StatoField, value) != true)) {
                    this.StatoField = value;
                    this.RaisePropertyChanged("Stato");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Voli", Namespace="http://schemas.datacontract.org/2004/07/Aeroporto")]
    [System.SerializableAttribute()]
    public partial class Voli : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Id_voloField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrezzoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrattaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id_volo {
            get {
                return this.Id_voloField;
            }
            set {
                if ((object.ReferenceEquals(this.Id_voloField, value) != true)) {
                    this.Id_voloField = value;
                    this.RaisePropertyChanged("Id_volo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Prezzo {
            get {
                return this.PrezzoField;
            }
            set {
                if ((this.PrezzoField.Equals(value) != true)) {
                    this.PrezzoField = value;
                    this.RaisePropertyChanged("Prezzo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tratta {
            get {
                return this.TrattaField;
            }
            set {
                if ((object.ReferenceEquals(this.TrattaField, value) != true)) {
                    this.TrattaField = value;
                    this.RaisePropertyChanged("Tratta");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tratte", Namespace="http://schemas.datacontract.org/2004/07/Aeroporto")]
    [System.SerializableAttribute()]
    public partial class Tratte : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinazioneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Id_trattaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartenzaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Destinazione {
            get {
                return this.DestinazioneField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinazioneField, value) != true)) {
                    this.DestinazioneField = value;
                    this.RaisePropertyChanged("Destinazione");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id_tratta {
            get {
                return this.Id_trattaField;
            }
            set {
                if ((object.ReferenceEquals(this.Id_trattaField, value) != true)) {
                    this.Id_trattaField = value;
                    this.RaisePropertyChanged("Id_tratta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Partenza {
            get {
                return this.PartenzaField;
            }
            set {
                if ((object.ReferenceEquals(this.PartenzaField, value) != true)) {
                    this.PartenzaField = value;
                    this.RaisePropertyChanged("Partenza");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lavora", Namespace="http://schemas.datacontract.org/2004/07/Aeroporto")]
    [System.SerializableAttribute()]
    public partial class Lavora : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassaportoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RuoloField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VoloField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Passaporto {
            get {
                return this.PassaportoField;
            }
            set {
                if ((object.ReferenceEquals(this.PassaportoField, value) != true)) {
                    this.PassaportoField = value;
                    this.RaisePropertyChanged("Passaporto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ruolo {
            get {
                return this.RuoloField;
            }
            set {
                if ((object.ReferenceEquals(this.RuoloField, value) != true)) {
                    this.RuoloField = value;
                    this.RaisePropertyChanged("Ruolo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Volo {
            get {
                return this.VoloField;
            }
            set {
                if ((object.ReferenceEquals(this.VoloField, value) != true)) {
                    this.VoloField = value;
                    this.RaisePropertyChanged("Volo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AirportService.IAirport")]
    public interface IAirport {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Login", ReplyAction="http://tempuri.org/IAirport/LoginResponse")]
        Airport_Client.AirportService.Utente Login(string mail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Login", ReplyAction="http://tempuri.org/IAirport/LoginResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Utente> LoginAsync(string mail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/LoginCrew", ReplyAction="http://tempuri.org/IAirport/LoginCrewResponse")]
        Airport_Client.AirportService.Utente LoginCrew(string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/LoginCrew", ReplyAction="http://tempuri.org/IAirport/LoginCrewResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Utente> LoginCrewAsync(string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Register", ReplyAction="http://tempuri.org/IAirport/RegisterResponse")]
        bool Register(Airport_Client.AirportService.Utente ut, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Register", ReplyAction="http://tempuri.org/IAirport/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(Airport_Client.AirportService.Utente ut, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Buy", ReplyAction="http://tempuri.org/IAirport/BuyResponse")]
        bool Buy(Airport_Client.AirportService.Biglietti bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Buy", ReplyAction="http://tempuri.org/IAirport/BuyResponse")]
        System.Threading.Tasks.Task<bool> BuyAsync(Airport_Client.AirportService.Biglietti bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Ricarica", ReplyAction="http://tempuri.org/IAirport/RicaricaResponse")]
        bool Ricarica(Airport_Client.AirportService.Utente ut, float credito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Ricarica", ReplyAction="http://tempuri.org/IAirport/RicaricaResponse")]
        System.Threading.Tasks.Task<bool> RicaricaAsync(Airport_Client.AirportService.Utente ut, float credito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckBiglietti", ReplyAction="http://tempuri.org/IAirport/CheckBigliettiResponse")]
        Airport_Client.AirportService.Biglietti[] CheckBiglietti(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckBiglietti", ReplyAction="http://tempuri.org/IAirport/CheckBigliettiResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Biglietti[]> CheckBigliettiAsync(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddAeroporti", ReplyAction="http://tempuri.org/IAirport/AddAeroportiResponse")]
        bool AddAeroporti(Airport_Client.AirportService.Aeroporti aer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddAeroporti", ReplyAction="http://tempuri.org/IAirport/AddAeroportiResponse")]
        System.Threading.Tasks.Task<bool> AddAeroportiAsync(Airport_Client.AirportService.Aeroporti aer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddVolo", ReplyAction="http://tempuri.org/IAirport/AddVoloResponse")]
        bool AddVolo(Airport_Client.AirportService.Voli vo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddVolo", ReplyAction="http://tempuri.org/IAirport/AddVoloResponse")]
        System.Threading.Tasks.Task<bool> AddVoloAsync(Airport_Client.AirportService.Voli vo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddTratta", ReplyAction="http://tempuri.org/IAirport/AddTrattaResponse")]
        bool AddTratta(Airport_Client.AirportService.Tratte tra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddTratta", ReplyAction="http://tempuri.org/IAirport/AddTrattaResponse")]
        System.Threading.Tasks.Task<bool> AddTrattaAsync(Airport_Client.AirportService.Tratte tra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddLavoro", ReplyAction="http://tempuri.org/IAirport/AddLavoroResponse")]
        bool AddLavoro(Airport_Client.AirportService.Lavora la);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddLavoro", ReplyAction="http://tempuri.org/IAirport/AddLavoroResponse")]
        System.Threading.Tasks.Task<bool> AddLavoroAsync(Airport_Client.AirportService.Lavora la);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckRuolo", ReplyAction="http://tempuri.org/IAirport/CheckRuoloResponse")]
        Airport_Client.AirportService.Lavora[] CheckRuolo(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckRuolo", ReplyAction="http://tempuri.org/IAirport/CheckRuoloResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Lavora[]> CheckRuoloAsync(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckBigliettiFilter", ReplyAction="http://tempuri.org/IAirport/CheckBigliettiFilterResponse")]
        Airport_Client.AirportService.Biglietti[] CheckBigliettiFilter(Airport_Client.AirportService.Utente ut, System.DateTime date, bool forward);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckBigliettiFilter", ReplyAction="http://tempuri.org/IAirport/CheckBigliettiFilterResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Biglietti[]> CheckBigliettiFilterAsync(Airport_Client.AirportService.Utente ut, System.DateTime date, bool forward);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Ricerca", ReplyAction="http://tempuri.org/IAirport/RicercaResponse")]
        Airport_Client.AirportService.Voli[] Ricerca(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Ricerca", ReplyAction="http://tempuri.org/IAirport/RicercaResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> RicercaAsync(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/BestPrice", ReplyAction="http://tempuri.org/IAirport/BestPriceResponse")]
        Airport_Client.AirportService.Voli[] BestPrice(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/BestPrice", ReplyAction="http://tempuri.org/IAirport/BestPriceResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> BestPriceAsync(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Misentofortutato", ReplyAction="http://tempuri.org/IAirport/MisentofortutatoResponse")]
        Airport_Client.AirportService.Voli[] Misentofortutato(Airport_Client.AirportService.Aeroporti a1, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/Misentofortutato", ReplyAction="http://tempuri.org/IAirport/MisentofortutatoResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> MisentofortutatoAsync(Airport_Client.AirportService.Aeroporti a1, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/MisentofortutatoNoData", ReplyAction="http://tempuri.org/IAirport/MisentofortutatoNoDataResponse")]
        Airport_Client.AirportService.Voli[] MisentofortutatoNoData(Airport_Client.AirportService.Aeroporti a1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/MisentofortutatoNoData", ReplyAction="http://tempuri.org/IAirport/MisentofortutatoNoDataResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> MisentofortutatoNoDataAsync(Airport_Client.AirportService.Aeroporti a1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckLavoro", ReplyAction="http://tempuri.org/IAirport/CheckLavoroResponse")]
        Airport_Client.AirportService.Lavora[] CheckLavoro(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/CheckLavoro", ReplyAction="http://tempuri.org/IAirport/CheckLavoroResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Lavora[]> CheckLavoroAsync(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetTratte", ReplyAction="http://tempuri.org/IAirport/GetTratteResponse")]
        Airport_Client.AirportService.Tratte[] GetTratte();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetTratte", ReplyAction="http://tempuri.org/IAirport/GetTratteResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Tratte[]> GetTratteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetAirports", ReplyAction="http://tempuri.org/IAirport/GetAirportsResponse")]
        Airport_Client.AirportService.Aeroporti[] GetAirports();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetAirports", ReplyAction="http://tempuri.org/IAirport/GetAirportsResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Aeroporti[]> GetAirportsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/UserfromPP", ReplyAction="http://tempuri.org/IAirport/UserfromPPResponse")]
        Airport_Client.AirportService.Utente UserfromPP(string pp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/UserfromPP", ReplyAction="http://tempuri.org/IAirport/UserfromPPResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Utente> UserfromPPAsync(string pp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddPP", ReplyAction="http://tempuri.org/IAirport/AddPPResponse")]
        bool AddPP(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/AddPP", ReplyAction="http://tempuri.org/IAirport/AddPPResponse")]
        System.Threading.Tasks.Task<bool> AddPPAsync(Airport_Client.AirportService.Utente ut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetCrewMember", ReplyAction="http://tempuri.org/IAirport/GetCrewMemberResponse")]
        Airport_Client.AirportService.Utente[] GetCrewMember();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetCrewMember", ReplyAction="http://tempuri.org/IAirport/GetCrewMemberResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Utente[]> GetCrewMemberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetUsers", ReplyAction="http://tempuri.org/IAirport/GetUsersResponse")]
        Airport_Client.AirportService.Utente[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetUsers", ReplyAction="http://tempuri.org/IAirport/GetUsersResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Utente[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetJobs", ReplyAction="http://tempuri.org/IAirport/GetJobsResponse")]
        Airport_Client.AirportService.Lavora[] GetJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetJobs", ReplyAction="http://tempuri.org/IAirport/GetJobsResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Lavora[]> GetJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetVoli", ReplyAction="http://tempuri.org/IAirport/GetVoliResponse")]
        Airport_Client.AirportService.Voli[] GetVoli();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/GetVoli", ReplyAction="http://tempuri.org/IAirport/GetVoliResponse")]
        System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> GetVoliAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveAirport", ReplyAction="http://tempuri.org/IAirport/RemoveAirportResponse")]
        bool RemoveAirport(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveAirport", ReplyAction="http://tempuri.org/IAirport/RemoveAirportResponse")]
        System.Threading.Tasks.Task<bool> RemoveAirportAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemovePath", ReplyAction="http://tempuri.org/IAirport/RemovePathResponse")]
        bool RemovePath(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemovePath", ReplyAction="http://tempuri.org/IAirport/RemovePathResponse")]
        System.Threading.Tasks.Task<bool> RemovePathAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveUser", ReplyAction="http://tempuri.org/IAirport/RemoveUserResponse")]
        bool RemoveUser(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveUser", ReplyAction="http://tempuri.org/IAirport/RemoveUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveFlight", ReplyAction="http://tempuri.org/IAirport/RemoveFlightResponse")]
        bool RemoveFlight(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveFlight", ReplyAction="http://tempuri.org/IAirport/RemoveFlightResponse")]
        System.Threading.Tasks.Task<bool> RemoveFlightAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveJob", ReplyAction="http://tempuri.org/IAirport/RemoveJobResponse")]
        bool RemoveJob(string pp, string volo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirport/RemoveJob", ReplyAction="http://tempuri.org/IAirport/RemoveJobResponse")]
        System.Threading.Tasks.Task<bool> RemoveJobAsync(string pp, string volo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirportChannel : Airport_Client.AirportService.IAirport, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirportClient : System.ServiceModel.ClientBase<Airport_Client.AirportService.IAirport>, Airport_Client.AirportService.IAirport {
        
        public AirportClient() {
        }
        
        public AirportClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirportClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Airport_Client.AirportService.Utente Login(string mail, string password) {
            return base.Channel.Login(mail, password);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Utente> LoginAsync(string mail, string password) {
            return base.Channel.LoginAsync(mail, password);
        }
        
        public Airport_Client.AirportService.Utente LoginCrew(string mail) {
            return base.Channel.LoginCrew(mail);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Utente> LoginCrewAsync(string mail) {
            return base.Channel.LoginCrewAsync(mail);
        }
        
        public bool Register(Airport_Client.AirportService.Utente ut, string password) {
            return base.Channel.Register(ut, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(Airport_Client.AirportService.Utente ut, string password) {
            return base.Channel.RegisterAsync(ut, password);
        }
        
        public bool Buy(Airport_Client.AirportService.Biglietti bi) {
            return base.Channel.Buy(bi);
        }
        
        public System.Threading.Tasks.Task<bool> BuyAsync(Airport_Client.AirportService.Biglietti bi) {
            return base.Channel.BuyAsync(bi);
        }
        
        public bool Ricarica(Airport_Client.AirportService.Utente ut, float credito) {
            return base.Channel.Ricarica(ut, credito);
        }
        
        public System.Threading.Tasks.Task<bool> RicaricaAsync(Airport_Client.AirportService.Utente ut, float credito) {
            return base.Channel.RicaricaAsync(ut, credito);
        }
        
        public Airport_Client.AirportService.Biglietti[] CheckBiglietti(Airport_Client.AirportService.Utente ut) {
            return base.Channel.CheckBiglietti(ut);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Biglietti[]> CheckBigliettiAsync(Airport_Client.AirportService.Utente ut) {
            return base.Channel.CheckBigliettiAsync(ut);
        }
        
        public bool AddAeroporti(Airport_Client.AirportService.Aeroporti aer) {
            return base.Channel.AddAeroporti(aer);
        }
        
        public System.Threading.Tasks.Task<bool> AddAeroportiAsync(Airport_Client.AirportService.Aeroporti aer) {
            return base.Channel.AddAeroportiAsync(aer);
        }
        
        public bool AddVolo(Airport_Client.AirportService.Voli vo) {
            return base.Channel.AddVolo(vo);
        }
        
        public System.Threading.Tasks.Task<bool> AddVoloAsync(Airport_Client.AirportService.Voli vo) {
            return base.Channel.AddVoloAsync(vo);
        }
        
        public bool AddTratta(Airport_Client.AirportService.Tratte tra) {
            return base.Channel.AddTratta(tra);
        }
        
        public System.Threading.Tasks.Task<bool> AddTrattaAsync(Airport_Client.AirportService.Tratte tra) {
            return base.Channel.AddTrattaAsync(tra);
        }
        
        public bool AddLavoro(Airport_Client.AirportService.Lavora la) {
            return base.Channel.AddLavoro(la);
        }
        
        public System.Threading.Tasks.Task<bool> AddLavoroAsync(Airport_Client.AirportService.Lavora la) {
            return base.Channel.AddLavoroAsync(la);
        }
        
        public Airport_Client.AirportService.Lavora[] CheckRuolo(Airport_Client.AirportService.Utente ut) {
            return base.Channel.CheckRuolo(ut);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Lavora[]> CheckRuoloAsync(Airport_Client.AirportService.Utente ut) {
            return base.Channel.CheckRuoloAsync(ut);
        }
        
        public Airport_Client.AirportService.Biglietti[] CheckBigliettiFilter(Airport_Client.AirportService.Utente ut, System.DateTime date, bool forward) {
            return base.Channel.CheckBigliettiFilter(ut, date, forward);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Biglietti[]> CheckBigliettiFilterAsync(Airport_Client.AirportService.Utente ut, System.DateTime date, bool forward) {
            return base.Channel.CheckBigliettiFilterAsync(ut, date, forward);
        }
        
        public Airport_Client.AirportService.Voli[] Ricerca(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2, System.DateTime date) {
            return base.Channel.Ricerca(a1, a2, date);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> RicercaAsync(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2, System.DateTime date) {
            return base.Channel.RicercaAsync(a1, a2, date);
        }
        
        public Airport_Client.AirportService.Voli[] BestPrice(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2) {
            return base.Channel.BestPrice(a1, a2);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> BestPriceAsync(Airport_Client.AirportService.Aeroporti a1, Airport_Client.AirportService.Aeroporti a2) {
            return base.Channel.BestPriceAsync(a1, a2);
        }
        
        public Airport_Client.AirportService.Voli[] Misentofortutato(Airport_Client.AirportService.Aeroporti a1, System.DateTime date) {
            return base.Channel.Misentofortutato(a1, date);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> MisentofortutatoAsync(Airport_Client.AirportService.Aeroporti a1, System.DateTime date) {
            return base.Channel.MisentofortutatoAsync(a1, date);
        }
        
        public Airport_Client.AirportService.Voli[] MisentofortutatoNoData(Airport_Client.AirportService.Aeroporti a1) {
            return base.Channel.MisentofortutatoNoData(a1);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> MisentofortutatoNoDataAsync(Airport_Client.AirportService.Aeroporti a1) {
            return base.Channel.MisentofortutatoNoDataAsync(a1);
        }
        
        public Airport_Client.AirportService.Lavora[] CheckLavoro(Airport_Client.AirportService.Utente ut) {
            return base.Channel.CheckLavoro(ut);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Lavora[]> CheckLavoroAsync(Airport_Client.AirportService.Utente ut) {
            return base.Channel.CheckLavoroAsync(ut);
        }
        
        public Airport_Client.AirportService.Tratte[] GetTratte() {
            return base.Channel.GetTratte();
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Tratte[]> GetTratteAsync() {
            return base.Channel.GetTratteAsync();
        }
        
        public Airport_Client.AirportService.Aeroporti[] GetAirports() {
            return base.Channel.GetAirports();
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Aeroporti[]> GetAirportsAsync() {
            return base.Channel.GetAirportsAsync();
        }
        
        public Airport_Client.AirportService.Utente UserfromPP(string pp) {
            return base.Channel.UserfromPP(pp);
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Utente> UserfromPPAsync(string pp) {
            return base.Channel.UserfromPPAsync(pp);
        }
        
        public bool AddPP(Airport_Client.AirportService.Utente ut) {
            return base.Channel.AddPP(ut);
        }
        
        public System.Threading.Tasks.Task<bool> AddPPAsync(Airport_Client.AirportService.Utente ut) {
            return base.Channel.AddPPAsync(ut);
        }
        
        public Airport_Client.AirportService.Utente[] GetCrewMember() {
            return base.Channel.GetCrewMember();
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Utente[]> GetCrewMemberAsync() {
            return base.Channel.GetCrewMemberAsync();
        }
        
        public Airport_Client.AirportService.Utente[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Utente[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public Airport_Client.AirportService.Lavora[] GetJobs() {
            return base.Channel.GetJobs();
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Lavora[]> GetJobsAsync() {
            return base.Channel.GetJobsAsync();
        }
        
        public Airport_Client.AirportService.Voli[] GetVoli() {
            return base.Channel.GetVoli();
        }
        
        public System.Threading.Tasks.Task<Airport_Client.AirportService.Voli[]> GetVoliAsync() {
            return base.Channel.GetVoliAsync();
        }
        
        public bool RemoveAirport(string code) {
            return base.Channel.RemoveAirport(code);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAirportAsync(string code) {
            return base.Channel.RemoveAirportAsync(code);
        }
        
        public bool RemovePath(string code) {
            return base.Channel.RemovePath(code);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePathAsync(string code) {
            return base.Channel.RemovePathAsync(code);
        }
        
        public bool RemoveUser(string code) {
            return base.Channel.RemoveUser(code);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserAsync(string code) {
            return base.Channel.RemoveUserAsync(code);
        }
        
        public bool RemoveFlight(string code) {
            return base.Channel.RemoveFlight(code);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFlightAsync(string code) {
            return base.Channel.RemoveFlightAsync(code);
        }
        
        public bool RemoveJob(string pp, string volo) {
            return base.Channel.RemoveJob(pp, volo);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveJobAsync(string pp, string volo) {
            return base.Channel.RemoveJobAsync(pp, volo);
        }
    }
}
